{"version":3,"sources":["../src/createPod.ts"],"sourcesContent":["import * as k8s from \"@kubernetes/client-node\";\nimport type { V1PersistentVolume } from \"@kubernetes/client-node\";\n\nconst kc = new k8s.KubeConfig();\nkc.loadFromDefault();\n\nconst k8sApi = kc.makeApiClient(k8s.CoreV1Api);\n\nconst podFromImage = (userId: string, pvc: any) => {\n  return {\n    apiVersion: \"v1\",\n    kind: \"Pod\",\n    metadata: {\n      name: `mc-ide-pod-${userId}`,\n      labels: {\n        app: \"mc-ide\",\n      },\n    },\n    spec: {\n      containers: [\n        {\n          name: \"mc-ide\",\n          image: \"localhost:5000/mc-ide:latest\",\n        },\n      ],\n    },\n  };\n};\n\nconst volumeWithSize = (name: string, size: number): V1PersistentVolume => {\n  return {\n    apiVersion: \"v1\",\n    kind: \"PersistentVolume\",\n    metadata: {\n      name: name,\n      labels: {\n        app: \"mc-ide\",\n      },\n    },\n    spec: {\n      volumeType: \"pvc\",\n      accessModes: [\"ReadWriteMany\"],\n      capacity: {\n        storage: `${size}Gi`,\n      },\n    },\n  };\n};\n\nconst volumeClaimWithSize = (name: string, size: number) => {\n  return {\n    apiVersion: \"v1\",\n    kind: \"PersistentVolumeClaim\",\n    metadata: {\n      name: name,\n      labels: {\n        app: \"mc-ide\",\n      },\n    },\n    spec: {\n      accessModes: [\"ReadWriteMany\"],\n      resources: {\n        requests: {\n          storage: `${size}Gi`,\n        },\n      },\n    },\n  };\n};\n\nconst service = {\n  apiVersion: \"v1\",\n  kind: \"Service\",\n  metadata: {\n    name: \"mc-load-balancer\",\n  },\n  spec: {\n    type: \"LoadBalancer\",\n    ports: [\n      {\n        port: 80,\n        targetPort: 8080,\n      },\n    ],\n    selector: {\n      app: \"mc-ide\",\n    },\n  },\n};\n\nexport const createIDEPod = async (name: string, volumeSize: number = 2) => {\n  const volumeName = `mc-ide-volume-${name}`;\n  const volumeClaimName = `mc-ide-pvc-${name}`;\n\n  await k8sApi\n    .createPersistentVolume(volumeWithSize(volumeName, volumeSize))\n    .catch((err) => {\n      console.log(err);\n      throw Error(\"failed to create volume\");\n    });\n\n  await k8sApi\n    .createNamespacedPersistentVolumeClaim(\n      \"default\",\n      volumeClaimWithSize(volumeClaimName, volumeSize)\n    )\n    .catch((err) => {\n      console.log(\"failed to create namespaced pvc\");\n      console.log(err);\n      return;\n    });\n\n  await k8sApi\n    .createNamespacedPod(\"default\", podFromImage(name, volumeClaimName))\n    .catch((err) => {\n      console.log(\"failed to create namespaced pod\");\n      console.log(err);\n      return;\n    });\n\n  const serviceResponse = await k8sApi\n    .createNamespacedService(\"default\", service)\n    .catch((err) => {\n      console.log(\"failed to create namespaced service\");\n      console.log(err);\n      return;\n    });\n\n  // console.log(serviceResponse)\n};\n\nexport const deletePod = async (podId: string) => {\n  k8sApi.deleteNamespacedPod(podId, \"default\").then((res) => {});\n};\n"],"names":["createIDEPod","deletePod","kc","k8s","KubeConfig","loadFromDefault","k8sApi","makeApiClient","CoreV1Api","podFromImage","userId","pvc","apiVersion","kind","metadata","name","labels","app","spec","containers","image","volumeWithSize","size","volumeType","accessModes","capacity","storage","volumeClaimWithSize","resources","requests","service","type","ports","port","targetPort","selector","volumeSize","volumeName","volumeClaimName","createPersistentVolume","catch","err","console","log","Error","createNamespacedPersistentVolumeClaim","createNamespacedPod","serviceResponse","createNamespacedService","podId","deleteNamespacedPod","then","res"],"mappings":"AAAA;;;;;;;;;;;IA0FaA,YAAY,MAAZA;IAyCAC,SAAS,MAATA;;oDAnIQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGrB,MAAMC,KAAK,IAAIC,YAAIC,UAAU;AAC7BF,GAAGG,eAAe;AAElB,MAAMC,SAASJ,GAAGK,aAAa,CAACJ,YAAIK,SAAS;AAE7C,MAAMC,eAAe,CAACC,QAAgBC,MAAa;IACjD,OAAO;QACLC,YAAY;QACZC,MAAM;QACNC,UAAU;YACRC,MAAM,CAAC,WAAW,EAAEL,OAAO,CAAC;YAC5BM,QAAQ;gBACNC,KAAK;YACP;QACF;QACAC,MAAM;YACJC,YAAY;gBACV;oBACEJ,MAAM;oBACNK,OAAO;gBACT;aACD;QACH;IACF;AACF;AAEA,MAAMC,iBAAiB,CAACN,MAAcO,OAAqC;IACzE,OAAO;QACLV,YAAY;QACZC,MAAM;QACNC,UAAU;YACRC,MAAMA;YACNC,QAAQ;gBACNC,KAAK;YACP;QACF;QACAC,MAAM;YACJK,YAAY;YACZC,aAAa;gBAAC;aAAgB;YAC9BC,UAAU;gBACRC,SAAS,CAAC,EAAEJ,KAAK,EAAE,CAAC;YACtB;QACF;IACF;AACF;AAEA,MAAMK,sBAAsB,CAACZ,MAAcO,OAAiB;IAC1D,OAAO;QACLV,YAAY;QACZC,MAAM;QACNC,UAAU;YACRC,MAAMA;YACNC,QAAQ;gBACNC,KAAK;YACP;QACF;QACAC,MAAM;YACJM,aAAa;gBAAC;aAAgB;YAC9BI,WAAW;gBACTC,UAAU;oBACRH,SAAS,CAAC,EAAEJ,KAAK,EAAE,CAAC;gBACtB;YACF;QACF;IACF;AACF;AAEA,MAAMQ,UAAU;IACdlB,YAAY;IACZC,MAAM;IACNC,UAAU;QACRC,MAAM;IACR;IACAG,MAAM;QACJa,MAAM;QACNC,OAAO;YACL;gBACEC,MAAM;gBACNC,YAAY;YACd;SACD;QACDC,UAAU;YACRlB,KAAK;QACP;IACF;AACF;AAEO,MAAMjB,eAAe,OAAOe,MAAcqB,aAAqB,CAAC,GAAK;IAC1E,MAAMC,aAAa,CAAC,cAAc,EAAEtB,KAAK,CAAC;IAC1C,MAAMuB,kBAAkB,CAAC,WAAW,EAAEvB,KAAK,CAAC;IAE5C,MAAMT,OACHiC,sBAAsB,CAAClB,eAAegB,YAAYD,aAClDI,KAAK,CAAC,CAACC,MAAQ;QACdC,QAAQC,GAAG,CAACF;QACZ,MAAMG,MAAM,2BAA2B;IACzC;IAEF,MAAMtC,OACHuC,qCAAqC,CACpC,WACAlB,oBAAoBW,iBAAiBF,aAEtCI,KAAK,CAAC,CAACC,MAAQ;QACdC,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAACF;QACZ;IACF;IAEF,MAAMnC,OACHwC,mBAAmB,CAAC,WAAWrC,aAAaM,MAAMuB,kBAClDE,KAAK,CAAC,CAACC,MAAQ;QACdC,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAACF;QACZ;IACF;IAEF,MAAMM,kBAAkB,MAAMzC,OAC3B0C,uBAAuB,CAAC,WAAWlB,SACnCU,KAAK,CAAC,CAACC,MAAQ;QACdC,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAACF;QACZ;IACF;AAGJ;AAEO,MAAMxC,YAAY,OAAOgD,QAAkB;IAChD3C,OAAO4C,mBAAmB,CAACD,OAAO,WAAWE,IAAI,CAAC,CAACC,MAAQ,CAAC;AAC9D"}