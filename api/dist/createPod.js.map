{"version":3,"sources":["../src/createPod.ts"],"sourcesContent":["import * as k8s from \"@kubernetes/client-node\"\n\nconst kc = new k8s.KubeConfig()\nkc.loadFromDefault()\n\nconst k8sApi = kc.makeApiClient(k8s.CoreV1Api)\n\n\nconst pod = {\n  apiVersion: \"v1\",\n  kind: \"Pod\",\n  metadata: {\n    name: \"mc-ide-pod\",\n    labels: {\n      app: \"mc-ide\"\n    }\n  },\n  spec: {\n    containers: [\n      {\n        name: 'mc-ide',\n        image: 'localhost:5000/mc-ide:latest'\n      }\n    ]\n  }\n}\n\nconst service = {\n  apiVersion: \"v1\",\n  kind: \"Service\",\n  metadata: {\n    name: \"mc-load-balancer\"\n  },\n  spec: {\n    type: \"LoadBalancer\",\n    ports: [\n      {\n        port: 80,\n        targetPort: 8080\n      }\n    ],\n    selector: {\n      app: \"mc-ide\"\n    }\n  }\n};\n\n\nexport const createPod = async () => {\n  k8sApi.createNamespacedPod(\"default\", pod).then((res) => {\n    return k8sApi.createNamespacedService(\"default\", service);\n  }).then((res) => {\n    console.log(res)\n  })\n}"],"names":["createPod","kc","k8s","KubeConfig","loadFromDefault","k8sApi","makeApiClient","CoreV1Api","pod","apiVersion","kind","metadata","name","labels","app","spec","containers","image","service","type","ports","port","targetPort","selector","createNamespacedPod","then","res","createNamespacedService","console","log"],"mappings":"AAAA;;;;+BAgDaA;;aAAAA;;oDAhDQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAErB,MAAMC,KAAK,IAAIC,YAAIC,UAAU;AAC7BF,GAAGG,eAAe;AAElB,MAAMC,SAASJ,GAAGK,aAAa,CAACJ,YAAIK,SAAS;AAG7C,MAAMC,MAAM;IACVC,YAAY;IACZC,MAAM;IACNC,UAAU;QACRC,MAAM;QACNC,QAAQ;YACNC,KAAK;QACP;IACF;IACAC,MAAM;QACJC,YAAY;YACV;gBACEJ,MAAM;gBACNK,OAAO;YACT;SACD;IACH;AACF;AAEA,MAAMC,UAAU;IACdT,YAAY;IACZC,MAAM;IACNC,UAAU;QACRC,MAAM;IACR;IACAG,MAAM;QACJI,MAAM;QACNC,OAAO;YACL;gBACEC,MAAM;gBACNC,YAAY;YACd;SACD;QACDC,UAAU;YACRT,KAAK;QACP;IACF;AACF;AAGO,MAAMd,YAAY,UAAY;IACnCK,OAAOmB,mBAAmB,CAAC,WAAWhB,KAAKiB,IAAI,CAAC,CAACC,MAAQ;QACvD,OAAOrB,OAAOsB,uBAAuB,CAAC,WAAWT;IACnD,GAAGO,IAAI,CAAC,CAACC,MAAQ;QACfE,QAAQC,GAAG,CAACH;IACd;AACF"}